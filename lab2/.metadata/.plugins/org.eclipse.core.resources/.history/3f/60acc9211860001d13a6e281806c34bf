
//libraries
#include "ee.h"
#include "ee_irq.h"

//Low level hardware specific definitions
#define __USE_LEDS__
#define __USE_BUTTONS__
#include "board/axiom_mpc5674fxmb/inc/ee_board.h"
#include "com/ee_com.h"
#include "com/com/inc/ee_cominit.h"
#include "com/com/inc/ee_api.h"

volatile unsigned int ERROR_FLAG = 0;

//add task by declaring
DeclareTask( SenderTask);
//add events by declaring
DeclareEvent( TimerEvent1);
DeclareEvent( BroadcastEvent)

DeclareAlarm(AlarmTask1); //We need this to start on buttonpress;

void led_blink(unsigned char theled); //to change led configuration: blinking or not blinking

//global variables to set global status of led
volatile int led_status = 0; //command compiler to not optimize the variable
volatile int myErrorCounter; //to count number of errors to check the error hook working
/**/

/* just a dummy delay */
void mydelay(unsigned long int del) { //for loop stupid. busy wait
	volatile long int i; //compiler may remove because loop and no return of value  so volatile.
	for (i = 0; i < del; i++) {
		//empty
	}
}
/**/

/* Added for a finest debugger (run-time) tuning */
int tunable_delay = 50000;
/**/


/* sets and resets a led configuration passed as parameter, leaving the other
 * bits unchanged...
 */
void led_blink(unsigned char theled) {

	DisableAllInterrupts();
	led_status ^= theled; //flip the desired led status.
	EE_leds(led_status);
	EnableAllInterrupts();
	/*
	 * 00 => 0
	 * 01 => 1
	 * 10 => 0
	 * 11 => 1
	 */
}

static void Buttons_Interrupt(void) { //ISR1 not needed in OIL but still used service routine hardware specific.
	static int running =0;
	running = !running;
	if (running) {
		EE_led_3_off();
	} else {
		EE_led_3_on();
	}
	SetEvent(SenderTask, BroadcastEvent);
	EE_buttons_clear_ISRflag(BUTTON_0);
}

static void Counter_Interrupt(void) {//Increment counter for Alarm(s)
	CounterTick(myCounter);

	EE_e200z7_setup_decrementer(2000); //target board specific
}

void ErrorHook(StatusType Error) { //executed when system catches error
	myErrorCounter++; //increment global counter //just in case although not executed due to infinite loop
	ERROR_FLAG = Error; // global variable set to error
	led_blink(0xFF);
}

/*
 * The StartupHook in this case is used to initialize the Button and timer
 * interrupts
 */
void StartupHook(void) { //runs at boot . can be done at initial part in main. hook more elegant
	EE_buttons_init(BUTTON_0, 3); //low level function. implementation board specific

	//in datasheet of ERIKA
	EE_e200z7_register_ISR(46 + 16, Buttons_Interrupt, 1); //initialize interrupts
	EE_e200z7_register_ISR(10, Counter_Interrupt, 0); //in datasheet of Erika
	EE_e200z7_setup_decrementer(2000); ////in datasheet of Erika

	led_blink(0b11111111);
}

TASK( SenderTask) {
	EventMaskType mask1;
	static int sosMessage[34]={
	        1, 0, 1, 0, 1, 0, //S
	        0,0,0, //pause
	        1,1,1, 0 , 1,1,1, 0, 1,1,1, 0, //O
	        0,0,0, //pause
	        1, 0, 1, 0, 1, 0, //S
	        0,0,0,0 //End of message pause
	};

	int broadcasting = 0;
	int index =0;
	unsigned int bitvalue = 0;
	while(1){
		WaitEvent(TimerEvent1 | BroadcastEvent); //wait any event? No. why specify event? Ans: event we want to wait. more than one event with bitwise |
		{

			GetEvent(SenderTask, &mask1); //to check which event received
			if (mask1 & TimerEvent1) {//If alarm went off we should send next bit!
				if (broadcasting) {
					bitvalue=sosMessage[index];
					if (bitvalue) {
						EE_led_7_on();
					} else {
						EE_led_7_off();
					}
					ClearEvent(TimerEvent1);
					index=(index+1)%35; //count round 35s (Length of message)
				}

			} else if (mask1 & BroadcastEvent) {
				broadcasting = !broadcasting;
				index = 0; //Resets count on start/end of broadcast
				bitvalue = 0;//resets bitvalue aswell;
				ClearEvent(BroadcastEvent);
			}
		}
	}
	TerminateTask(); //safety
}

int main(void) {
	EE_leds_init();
	StartOS(OSDEFAULTAPPMODE);
	EE_e200z7_enableIRQ();
	//EE_leds_off();
	for (;;) {
	}
	return 0;

}


//IDEA:
/*
	Task1: Wait for button activation
		When activated. Send the message on repeat to Task 2, 1 symbol at a time every 100ms (alarm)
		ButtonPress again => TerminateTask?
	Task2: Basic task activated on message recieved. Turn lights on/off depending on 1 or 0. 1= on, 0 is turn of.
	Message: 101010 000 111011101110 000 101010 0000 =  1010100001110111011100001010100000
				S	- 		O		 -		S	 -    Repeat
 	MessageLength = 35

 */






