CPU test_application {
	OS message_passing {
	//board/* ###*B*###

/*
 * Author: Evidence Srl in collaboration with Lauterbach
 */

#include "ee.h"
#include "ee_irq.h"
#include "board/axiom_mpc5674fxmb/inc/ee_board.h"

#define LED_ON	1
#define LED_OFF	0

/* Dummy shared variable used by ALL tasks */
unsigned char dummy_shared_variable = 0;

/* A few counters incremented at each event 
 * (alarm, button press or task activation...)
 */
volatile int timer_fired=0;
volatile int button_fired=0;
volatile int task1_fired=0;
volatile int task2_fired=0;
volatile int task3_fired=0;
volatile int task4_fired=0;
volatile int task5_fired=0;
volatile int task6_fired=0;
volatile int task7_fired=0;

/* Added for a finest debugger (run-time) tuning */
int tunable_delay = 50000;

/* Let's declare the tasks identifiers */
DeclareTask(Task1);
DeclareTask(Task2);
DeclareTask(Task3);
DeclareTask(Task4);
DeclareTask(Task5);
DeclareTask(Task6);
DeclareTask(Task7);

/* Event declaration */
DeclareEvent(TimerEvent);

/* some other prototypes */
void mydelay(long int end);
void led_blink(unsigned char theled);

static void led_on(void)
{
	EE_led_3_on();
	EE_led_7_off();
}

static void led_off(void)
{
	EE_led_3_off();
	EE_led_7_on();
}

/* just a dummy delay */ 
void mydelay(long int end)
{
  	volatile long int i;
  	for (i=0; i<end; i++);
    
  	return;  
}

void led_blink(unsigned char theled)
{
  DisableAllInterrupts();
  EE_led_set(theled, LED_ON);
  EnableAllInterrupts();

  mydelay((long int)tunable_delay);

  DisableAllInterrupts();
  EE_led_set(theled, LED_OFF);
  EnableAllInterrupts();
}

/* Task1: just call the ChristmasTree */
TASK(Task1)
{
  task1_fired++;

  /* First half of the christmas tree */
  led_blink(0);
  led_blink(1);
  led_blink(2);

  /* Second half of the christmas tree */
  led_blink(4);
  led_blink(5);
  led_blink(6);
  
  TerminateTask();
}


/* Task2: blink led3 and led7 */
TASK(Task2)
{
  static int which_led = 0;

  task2_fired++;

  /* First click: led_3 on led_7 off */
  if (which_led) {
	led_on();
    which_led = 0;
  }
  else 
  {
    /* Second click: led_3 off led_7 on */
	led_off();
    which_led = 1;
  }

  TerminateTask();
}

TASK(Task3)
{
  task3_fired++;

  /* Lock the resource */
  GetResource(Resource);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 3;

  /* Release the lock */
  ReleaseResource(Resource);

  /* Lock the resource */
  GetResource(Resource3);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 6;

  /* Release the lock */
  ReleaseResource(Resource3);

  /* Lock the resource */
  GetResource(Resource2);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 12;

  /* Release the lock */
  ReleaseResource(Resource2);
  
  TerminateTask();
}

TASK(Task4)
{
  task4_fired++;

  /* Lock the resource */
  GetResource(Resource);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 4;

  /* Release the lock */
  ReleaseResource(Resource);

  /* Lock the resource */
  GetResource(Resource3);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 8;

  /* Release the lock */
  ReleaseResource(Resource3);
  
  TerminateTask();
}

TASK(Task5)
{
  task5_fired++;

  /* Lock the resource */
  GetResource(Resource);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 5;

  /* Release the lock */
  ReleaseResource(Resource);
  
  TerminateTask();
}

TASK(Task6)
{
  EventMaskType mask;
  
  while (1) {
    WaitEvent(TimerEvent);
    GetEvent(Task6, &mask);

    if (mask & TimerEvent) {
      ClearEvent(TimerEvent);
    }

    /* Lock the resource */
    GetResource(Resource2);

    /* Write to a dummy shared variable */
    dummy_shared_variable = 24;

    /* Release the lock */
    ReleaseResource(Resource2);
  }

  TerminateTask();
}

TASK(Task7)
{
  /* Lock the resource */
  GetResource(Resource3);

  /* Write to a dummy shared variable */
  dummy_shared_variable = 7;

  /* Release the lock */
  ReleaseResource(Resource3);

  TerminateTask();
}
 
static void Buttons_Interrupt(void)
{
  button_fired++;
  ActivateTask(Task2);

   /* arm an alarm that will activate Task7 */
  SetRelAlarm(AlarmTask2,750,0);

  EE_buttons_clear_ISRflag(BUTTON_0);
}

volatile int timer_divisor = 0;

static void Counter_Interrupt(void)
{
  CounterTick(Counter1);

  timer_divisor++;

  if (timer_divisor == 1) {
    ActivateTask(Task3);
  }
  else if (timer_divisor == 100) {
    ActivateTask(Task4);
  }
  else if (timer_divisor == 200) {
    ActivateTask(Task5);
  }
  else if (timer_divisor==300) {
    timer_divisor = 0;
    timer_fired++;
    ActivateTask(Task1);
  }
  else {
    /* Dummy empty else statement */
  }

  /* reset the decrementer to fire again */
  EE_e200z7_setup_decrementer(2000);
}

static void setup_interrupts(void)
{
  EE_e200z7_register_ISR(46 + 16, Buttons_Interrupt, 15);
  EE_e200z7_register_ISR(10, Counter_Interrupt, 0);
  EE_e200z7_setup_decrementer(2000);
  EE_e200z7_enableIRQ();
}

int main(void)
{
  /* Init devices */
  EE_buttons_init(BUTTON_0,3);
  
  /* Init leds */
  EE_leds_init();
  
  setup_interrupts();
  
  /* let's start the multiprogramming environment...*/
  StartOS(OSDEFAULTAPPMODE);
  
  /* now the background activities... */
  for (;;);
  
  return 0;
}
	 setup
		EE_OPT = "DEBUG";
		EE_OPT = "__USE_LEDS__";
		EE_OPT = "__USE_BUTTONS__";
		EE_OPT = "__E200ZX_EXECUTE_FROM_RAM__";
		EE_OPT = "EE_ISR_DYNAMIC_TABLE";
		EE_OPT = "EE_LAUTERBACH_DEMO_SIM";
		//flags for compiler
		CFLAGS = "";
		ASFLAGS = "";
		LDFLAGS = "";

		//target CPU information (chip)
		CPU_DATA = PPCE200ZX {
			MODEL = E200Z7;
			APP_SRC = "code.c";
			MULTI_STACK = TRUE {
				IRQ_STACK = TRUE {
					SYS_SIZE = 4096; //stack

				};
			};
			COMPILER_TYPE = GNU;
			/* VLE = TRUE; */
		};
		MCU_DATA = PPCE200ZX { //MCU information
			MODEL = MPC5674F;
		};

		//all above standard common
		STATUS = EXTENDED;
		STARTUPHOOK = TRUE; //* 
		ERRORHOOK = TRUE; //*
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = TRUE;

		/* Setup Kernel Type */
		KERNEL_TYPE = ECC2; //Conformance class ECC2, tells which kernel type we want

		/* Enable ORTI support for Lauterbach Tracer */
		ORTI_SECTIONS = ALL;
	};
    
    EVENT TimerEvent1 {
		MASK = AUTO;
	};
	EVENT msgIn {
		MASK = AUTO;
	};
	
    
    TASK Task1 {
		PRIORITY = 0x01;   /* Equal priorities */
		SCHEDULE = FULL;
		AUTOSTART = TRUE;
		STACK = PRIVATE {
			SYS_SIZE = 1024;
		};
		ACTIVATION = 1;
		EVENT = TimerEvent1;
		MESSAGE = msgSendCount;
	};	
	
	
    TASK Task2 {
		PRIORITY = 0x01;   /* Equal priorities */
		SCHEDULE = NON;
		AUTOSTART = TRUE;	
		STACK = PRIVATE { //define stack size. Private stack : not shared. local to task.
			SYS_SIZE = 1024;
		};
 		ACTIVATION = 1;
 		EVENT = TimerEvent2;
 		RESOURCE= countResource;
    };
    
    COUNTER myCounter{
    	TICKSPERBASE = 1;
    	MAXALLOWEDVALUE = 0xFFFF;
    	MINCYCLE =2;
    };
    
  
    ALARM AlarmTask1 {
    	COUNTER = myCounter;
    	ACTION = SETEVENT {
			TASK = Task1; //send to task1
			EVENT = TimerEvent1; //timer event
		};
		AUTOSTART = TRUE { //start when counter at 250 then every 500
			ALARMTIME = 1000;
			CYCLETIME = 4000;	
		};
    };
    
    MESSAGE msgSendCount{
    	MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
    		CDATATYPE = "uint32";
    	};
    };
    
    
    MESSAGE msgRecieveCount{
    	MESSAGEPROPERTY= RECIEVE_UNQUEUED_INTERNAL {
    		SENDINGMESSAGE = msgSendCount;
    		FILTER = NEWISDIFFERENT;
    		INITIAL = 0x00;
    	};
    };
};
